JavaScript提供七种不同的data types(数据类型)，它们是
undefined（未定义）, 
null（空）,
boolean（布尔型）, 
string（字符串）, 
symbol(符号), 
number（数字）, 
object（对象）

Variable （变量）的名字可以由数字、字母、$ 或者 _组成，但是不能包含空格或者以数字为首。

对数组：push()在末尾添加
		pop() 在末尾抛出
		shift() 移除第一个元素
		unshift() 移入第一个元素

Math.random() 取随机小数（0~1不包括1）
Math.floor() 向下取整

var timesFour = oldArray.map(function(val){
  return val * 4;
});
map方法迭代数组中的每一个元素，根据回调函数来处理每一个元素，最后返回一个新组数，这个方法不会改变原函数。

singleVal = array.reduce(function(previousVal, currentVal) {
  return previousVal + currentVal;
}, 0);
数组方法reduce用来迭代一个数组，并且把它累积到一个值中。
使用reduce方法时，你要传入一个回调函数，这个回调函数的参数是一个累加器（比如例子中的 previousVal) 和当前值 (currentVal）。
reduce方法有一个可选的第二参数，它可以被用来设置累加器的初始值。如果没有在这定义初始值，那么初始值将变成数组中的第一项，而 currentVal 将从数组的第二项开始。

var newArray = oldArray.filter(function(val) {
  return val < 6;
});
filter方法用来迭代一个数组，并且按给出的条件过滤出符合的元素。
filter方法传入一个回调函数，这个回调函数会携带一个参数，参数为当前迭代的项（我们叫它 val ）。

array.sort(function(a, b) {
  return b - a;
});
从大到小

reverse()倒转数组

concat 方法可以用来把两个数组的内容合并到一个数组中。

split 方法按指定分隔符将字符串分割为数组。

join 方法来把数组转换成字符串，里面的每一个元素可以用你指定的连接符来连接起来，这个连接符就是你要传入的参数。

递归：
实现num阶乘
function factorialize(num) {
  if(num <= 1) {
    return 1;
  }
  return num * factorialize(num-1) ;
}

回文：如果一个字符串，忽略标点符号，大小写和空格，正反读都一样，那么就是回文
检查回文字符：
function palindrome(str) {
  // 请把你的代码写在这里
  var str1 = str.toLowerCase().replace(/[^a-zA-Z0-9]/g,"").split("");
  if(str1.join("") != str1.reverse().join("")) {
    return false;
  }
  return true;
}

找出字符串中的最长单词（可使用map方法实现循环）：
function findLongestWord(str) {
  // 请把你的代码写在这里
  var arry = str.split(" ");
  var strMax = arry[0].length;
  /*for(var i = 0; i < arry.length; i++) {
    strMax = arry[i].length > strMax ? arry[i].length : strMax;
  }*/
  arry.map(function(val) {
    strMax = val.length > strMax ? val.length : strMax;
  });
  return strMax;
}

句中单词首字母大写：
function titleCase(str) {
  // 请把你的代码写在这里
  var array = str.toLowerCase().split(" ");
  var array1 =  array.map(function(val) {
    return val.substring(0,1).toUpperCase() + val.substring(1); 
  });
  return array1.join(" ");
}

二维数组中的每项最大数，组成一个数组
function largestOfFour(arr) {
  // 请把你的代码写在这里
  var arrMax = [];
  for(var i = 0; i < arr.length; i++) {
    arrMax[i] = arr[i][0];
    for(var j = 0; j < arr[i].length; j++) {
      if(arrMax[i] < arr[i][j]) {
        arrMax[i] = arr[i][j];
      }
    }
  }
  return arrMax;
}


检查字符串结尾:判断一个字符串(str)是否以指定的字符串(target)结尾。
function confirmEnding(str, target) {
  // 请把你的代码写在这里
  if(str && target && str.length > target.length) {
    if(str.substring(str.length-target.length, str.length) == target) {
      return true;
    }
  }
  return false;
}

重复输出字符串:
function repeat(str, num) {
  // 请把你的代码写在这里
  var temp = str;
  if(num < 0) {
    return "";
  }
  if(num == 1) {
    return str;
  }
  for(var i = 1; i < num; i++) {
    str += temp;
  }
  return str;
}

截断字符串
function truncate(str, num) {
  // 请把你的代码写在这里
  var temp = str;
  if(str.length > num) {
    if(num > 3) {
      temp = str.substring(0, num-3) + "...";
    } else {
      temp = str.substring(0, num) + "...";
    }
  }
  return temp;
}

把一个数组arr按照指定的数组大小size分割成若干个数组块。
function chunk(arr, size) {
  // 请把你的代码写在这里
  var array = [];
  var temp = arr.length;
  if(arr.length < size) {
    array.push(arr);
  } else {
    for(var i = 0; i < temp; i += size) {
      array.push(arr.splice(0, size));
    }
  }
  return array;
}

截断数组：
返回一个数组被截断n个元素后还剩余的元素，截断从索引0开始。
function slasher(arr, howMany) {
  // 请把你的代码写在这里
  debugger;
  if(arr.length <= howMany) {
    return [];
  } else {
    arr.splice(0, howMany);
  }
  return arr;
}

slice和splice的区别
当只传两个参数的时候：
slice不会改变原有的数组，splice会改变
slice(a,b),从a开始，到b-1结束
splice(a,b),从a开始，截取b个

比较字符串：
如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。
function mutation(arr) {
  // 请把你的代码写在这里
  var hasIndexOf = true; 
  for(var i = 0; i < arr[1].length; i++) {
   var hasIndex = true;
    if(arr[0].toLowerCase().indexOf(arr[1][i].toLowerCase()) < 0) {
      hasIndex = false;
    }
    hasIndexOf = hasIndexOf && hasIndex;
  }
  return hasIndexOf;
}

数组过滤：使用Array.filter(callback[, thisArg])
例如：删除数组中的所有假值。在JavaScript中，假值有false、null、0、""、undefined 和 NaN。
funtion bouncer(arr) {
	return arr.filter(function(val) {
		return val ? true : false;
	});
}

实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。
传入一个数组，和若干字符串组成的参数(不确定长度)，实现将数组中存在于字符串中的项去打掉。
（1）不确定入参的长度 使用arguments，arguments类似于数组的一个对象，但不是数组，可通过Array.from(arguemnts)将其转化为数组，在这里需要截取不定长度的字符串，可使用Array.prototype.slice.call(argument,1)获得
（2）比较A数组中某一项是否存在于B数组中，可用（indexOf）来比较。（index既适用于数组也适用于字符串）
function destroyer(arr) {
  // 请把你的代码写在这里
  var destString = Array.prototype.slice.call(arguments, 1);
  return arr.filter(function(val) {
    if(destString.indexOf(val) < 0) {
      return true;
    }
    return false;
  });
}


先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。
将num插入arr中，返回排序后的索引。
function where(arr, num) {
  // 请把你的代码写在这里
  arr.push(num);
  arr.sort(function(a, b) {
    return a > b;
  });
  
  return arr.indexOf(num);
}


